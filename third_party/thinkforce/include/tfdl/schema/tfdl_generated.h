// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TFDL_TFDL_FB_H_
#define FLATBUFFERS_GENERATED_TFDL_TFDL_FB_H_

#include "flatbuffers/flatbuffers.h"

namespace tfdl_fb {

struct NonuniformTable;

struct DataTypeTable;

struct Weight;

struct QuantizationConfig;

struct DataQuantizationConfig;

struct WeightQuantizationConfig;

struct BinaryFile;

enum DataType {
  DataType_FLOAT32 = 0,
  DataType_FLOAT16 = 1,
  DataType_BFLOAT16 = 2,
  DataType_INT64 = 3,
  DataType_INT32 = 4,
  DataType_INT16 = 5,
  DataType_INT8 = 6,
  DataType_UINT32 = 7,
  DataType_UINT16 = 8,
  DataType_UINT8 = 9,
  DataType_NONUNIFORM = 10,
  DataType_STRING = 11,
  DataType_BOOLEAN = 12,
  DataType_MIN = DataType_FLOAT32,
  DataType_MAX = DataType_BOOLEAN
};

inline const DataType (&EnumValuesDataType())[13] {
  static const DataType values[] = {
    DataType_FLOAT32,
    DataType_FLOAT16,
    DataType_BFLOAT16,
    DataType_INT64,
    DataType_INT32,
    DataType_INT16,
    DataType_INT8,
    DataType_UINT32,
    DataType_UINT16,
    DataType_UINT8,
    DataType_NONUNIFORM,
    DataType_STRING,
    DataType_BOOLEAN
  };
  return values;
}

inline const char * const *EnumNamesDataType() {
  static const char * const names[] = {
    "FLOAT32",
    "FLOAT16",
    "BFLOAT16",
    "INT64",
    "INT32",
    "INT16",
    "INT8",
    "UINT32",
    "UINT16",
    "UINT8",
    "NONUNIFORM",
    "STRING",
    "BOOLEAN",
    nullptr
  };
  return names;
}

inline const char *EnumNameDataType(DataType e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesDataType()[index];
}

struct NonuniformTable FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_NAME = 4,
    VT_TABLE = 6
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  bool KeyCompareLessThan(const NonuniformTable *o) const {
    return *name() < *o->name();
  }
  int KeyCompareWithValue(const char *val) const {
    return strcmp(name()->c_str(), val);
  }
  const flatbuffers::Vector<uint16_t> *table() const {
    return GetPointer<const flatbuffers::Vector<uint16_t> *>(VT_TABLE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_TABLE) &&
           verifier.VerifyVector(table()) &&
           verifier.EndTable();
  }
};

struct NonuniformTableBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(NonuniformTable::VT_NAME, name);
  }
  void add_table(flatbuffers::Offset<flatbuffers::Vector<uint16_t>> table) {
    fbb_.AddOffset(NonuniformTable::VT_TABLE, table);
  }
  explicit NonuniformTableBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  NonuniformTableBuilder &operator=(const NonuniformTableBuilder &);
  flatbuffers::Offset<NonuniformTable> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<NonuniformTable>(end);
    fbb_.Required(o, NonuniformTable::VT_NAME);
    return o;
  }
};

inline flatbuffers::Offset<NonuniformTable> CreateNonuniformTable(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint16_t>> table = 0) {
  NonuniformTableBuilder builder_(_fbb);
  builder_.add_table(table);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<NonuniformTable> CreateNonuniformTableDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const std::vector<uint16_t> *table = nullptr) {
  return tfdl_fb::CreateNonuniformTable(
      _fbb,
      name ? _fbb.CreateString(name) : 0,
      table ? _fbb.CreateVector<uint16_t>(*table) : 0);
}

struct DataTypeTable FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_NAME = 4,
    VT_TYPE = 6
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  bool KeyCompareLessThan(const DataTypeTable *o) const {
    return *name() < *o->name();
  }
  int KeyCompareWithValue(const char *val) const {
    return strcmp(name()->c_str(), val);
  }
  DataType type() const {
    return static_cast<DataType>(GetField<int8_t>(VT_TYPE, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<int8_t>(verifier, VT_TYPE) &&
           verifier.EndTable();
  }
};

struct DataTypeTableBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(DataTypeTable::VT_NAME, name);
  }
  void add_type(DataType type) {
    fbb_.AddElement<int8_t>(DataTypeTable::VT_TYPE, static_cast<int8_t>(type), 0);
  }
  explicit DataTypeTableBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  DataTypeTableBuilder &operator=(const DataTypeTableBuilder &);
  flatbuffers::Offset<DataTypeTable> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DataTypeTable>(end);
    fbb_.Required(o, DataTypeTable::VT_NAME);
    return o;
  }
};

inline flatbuffers::Offset<DataTypeTable> CreateDataTypeTable(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    DataType type = DataType_FLOAT32) {
  DataTypeTableBuilder builder_(_fbb);
  builder_.add_name(name);
  builder_.add_type(type);
  return builder_.Finish();
}

inline flatbuffers::Offset<DataTypeTable> CreateDataTypeTableDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    DataType type = DataType_FLOAT32) {
  return tfdl_fb::CreateDataTypeTable(
      _fbb,
      name ? _fbb.CreateString(name) : 0,
      type);
}

struct Weight FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_NAME = 4,
    VT_WEIGHT_ID = 6,
    VT_TYPE = 8,
    VT_POINTER = 10
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  int32_t weight_id() const {
    return GetField<int32_t>(VT_WEIGHT_ID, 0);
  }
  DataType type() const {
    return static_cast<DataType>(GetField<int8_t>(VT_TYPE, 0));
  }
  const flatbuffers::Vector<uint8_t> *pointer() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_POINTER);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<int32_t>(verifier, VT_WEIGHT_ID) &&
           VerifyField<int8_t>(verifier, VT_TYPE) &&
           VerifyOffset(verifier, VT_POINTER) &&
           verifier.VerifyVector(pointer()) &&
           verifier.EndTable();
  }
};

struct WeightBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Weight::VT_NAME, name);
  }
  void add_weight_id(int32_t weight_id) {
    fbb_.AddElement<int32_t>(Weight::VT_WEIGHT_ID, weight_id, 0);
  }
  void add_type(DataType type) {
    fbb_.AddElement<int8_t>(Weight::VT_TYPE, static_cast<int8_t>(type), 0);
  }
  void add_pointer(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> pointer) {
    fbb_.AddOffset(Weight::VT_POINTER, pointer);
  }
  explicit WeightBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  WeightBuilder &operator=(const WeightBuilder &);
  flatbuffers::Offset<Weight> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Weight>(end);
    return o;
  }
};

inline flatbuffers::Offset<Weight> CreateWeight(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    int32_t weight_id = 0,
    DataType type = DataType_FLOAT32,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> pointer = 0) {
  WeightBuilder builder_(_fbb);
  builder_.add_pointer(pointer);
  builder_.add_weight_id(weight_id);
  builder_.add_name(name);
  builder_.add_type(type);
  return builder_.Finish();
}

inline flatbuffers::Offset<Weight> CreateWeightDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    int32_t weight_id = 0,
    DataType type = DataType_FLOAT32,
    const std::vector<uint8_t> *pointer = nullptr) {
  return tfdl_fb::CreateWeight(
      _fbb,
      name ? _fbb.CreateString(name) : 0,
      weight_id,
      type,
      pointer ? _fbb.CreateVector<uint8_t>(*pointer) : 0);
}

struct QuantizationConfig FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_MIN = 4,
    VT_MAX = 6,
    VT_SCALE = 8,
    VT_ZERO_POINT = 10,
    VT_QUANTIZE_BIT = 12
  };
  const flatbuffers::Vector<float> *min() const {
    return GetPointer<const flatbuffers::Vector<float> *>(VT_MIN);
  }
  const flatbuffers::Vector<float> *max() const {
    return GetPointer<const flatbuffers::Vector<float> *>(VT_MAX);
  }
  const flatbuffers::Vector<float> *scale() const {
    return GetPointer<const flatbuffers::Vector<float> *>(VT_SCALE);
  }
  const flatbuffers::Vector<int32_t> *zero_point() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_ZERO_POINT);
  }
  int32_t quantize_bit() const {
    return GetField<int32_t>(VT_QUANTIZE_BIT, 8);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_MIN) &&
           verifier.VerifyVector(min()) &&
           VerifyOffset(verifier, VT_MAX) &&
           verifier.VerifyVector(max()) &&
           VerifyOffset(verifier, VT_SCALE) &&
           verifier.VerifyVector(scale()) &&
           VerifyOffset(verifier, VT_ZERO_POINT) &&
           verifier.VerifyVector(zero_point()) &&
           VerifyField<int32_t>(verifier, VT_QUANTIZE_BIT) &&
           verifier.EndTable();
  }
};

struct QuantizationConfigBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_min(flatbuffers::Offset<flatbuffers::Vector<float>> min) {
    fbb_.AddOffset(QuantizationConfig::VT_MIN, min);
  }
  void add_max(flatbuffers::Offset<flatbuffers::Vector<float>> max) {
    fbb_.AddOffset(QuantizationConfig::VT_MAX, max);
  }
  void add_scale(flatbuffers::Offset<flatbuffers::Vector<float>> scale) {
    fbb_.AddOffset(QuantizationConfig::VT_SCALE, scale);
  }
  void add_zero_point(flatbuffers::Offset<flatbuffers::Vector<int32_t>> zero_point) {
    fbb_.AddOffset(QuantizationConfig::VT_ZERO_POINT, zero_point);
  }
  void add_quantize_bit(int32_t quantize_bit) {
    fbb_.AddElement<int32_t>(QuantizationConfig::VT_QUANTIZE_BIT, quantize_bit, 8);
  }
  explicit QuantizationConfigBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  QuantizationConfigBuilder &operator=(const QuantizationConfigBuilder &);
  flatbuffers::Offset<QuantizationConfig> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<QuantizationConfig>(end);
    return o;
  }
};

inline flatbuffers::Offset<QuantizationConfig> CreateQuantizationConfig(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<float>> min = 0,
    flatbuffers::Offset<flatbuffers::Vector<float>> max = 0,
    flatbuffers::Offset<flatbuffers::Vector<float>> scale = 0,
    flatbuffers::Offset<flatbuffers::Vector<int32_t>> zero_point = 0,
    int32_t quantize_bit = 8) {
  QuantizationConfigBuilder builder_(_fbb);
  builder_.add_quantize_bit(quantize_bit);
  builder_.add_zero_point(zero_point);
  builder_.add_scale(scale);
  builder_.add_max(max);
  builder_.add_min(min);
  return builder_.Finish();
}

inline flatbuffers::Offset<QuantizationConfig> CreateQuantizationConfigDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<float> *min = nullptr,
    const std::vector<float> *max = nullptr,
    const std::vector<float> *scale = nullptr,
    const std::vector<int32_t> *zero_point = nullptr,
    int32_t quantize_bit = 8) {
  return tfdl_fb::CreateQuantizationConfig(
      _fbb,
      min ? _fbb.CreateVector<float>(*min) : 0,
      max ? _fbb.CreateVector<float>(*max) : 0,
      scale ? _fbb.CreateVector<float>(*scale) : 0,
      zero_point ? _fbb.CreateVector<int32_t>(*zero_point) : 0,
      quantize_bit);
}

struct DataQuantizationConfig FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_NAME = 4,
    VT_PROFILE = 6
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  bool KeyCompareLessThan(const DataQuantizationConfig *o) const {
    return *name() < *o->name();
  }
  int KeyCompareWithValue(const char *val) const {
    return strcmp(name()->c_str(), val);
  }
  const QuantizationConfig *profile() const {
    return GetPointer<const QuantizationConfig *>(VT_PROFILE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_PROFILE) &&
           verifier.VerifyTable(profile()) &&
           verifier.EndTable();
  }
};

struct DataQuantizationConfigBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(DataQuantizationConfig::VT_NAME, name);
  }
  void add_profile(flatbuffers::Offset<QuantizationConfig> profile) {
    fbb_.AddOffset(DataQuantizationConfig::VT_PROFILE, profile);
  }
  explicit DataQuantizationConfigBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  DataQuantizationConfigBuilder &operator=(const DataQuantizationConfigBuilder &);
  flatbuffers::Offset<DataQuantizationConfig> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DataQuantizationConfig>(end);
    fbb_.Required(o, DataQuantizationConfig::VT_NAME);
    return o;
  }
};

inline flatbuffers::Offset<DataQuantizationConfig> CreateDataQuantizationConfig(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<QuantizationConfig> profile = 0) {
  DataQuantizationConfigBuilder builder_(_fbb);
  builder_.add_profile(profile);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<DataQuantizationConfig> CreateDataQuantizationConfigDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    flatbuffers::Offset<QuantizationConfig> profile = 0) {
  return tfdl_fb::CreateDataQuantizationConfig(
      _fbb,
      name ? _fbb.CreateString(name) : 0,
      profile);
}

struct WeightQuantizationConfig FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_NAME = 4,
    VT_PROFILE = 6
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  bool KeyCompareLessThan(const WeightQuantizationConfig *o) const {
    return *name() < *o->name();
  }
  int KeyCompareWithValue(const char *val) const {
    return strcmp(name()->c_str(), val);
  }
  const flatbuffers::Vector<flatbuffers::Offset<QuantizationConfig>> *profile() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<QuantizationConfig>> *>(VT_PROFILE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_PROFILE) &&
           verifier.VerifyVector(profile()) &&
           verifier.VerifyVectorOfTables(profile()) &&
           verifier.EndTable();
  }
};

struct WeightQuantizationConfigBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(WeightQuantizationConfig::VT_NAME, name);
  }
  void add_profile(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<QuantizationConfig>>> profile) {
    fbb_.AddOffset(WeightQuantizationConfig::VT_PROFILE, profile);
  }
  explicit WeightQuantizationConfigBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  WeightQuantizationConfigBuilder &operator=(const WeightQuantizationConfigBuilder &);
  flatbuffers::Offset<WeightQuantizationConfig> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<WeightQuantizationConfig>(end);
    fbb_.Required(o, WeightQuantizationConfig::VT_NAME);
    return o;
  }
};

inline flatbuffers::Offset<WeightQuantizationConfig> CreateWeightQuantizationConfig(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<QuantizationConfig>>> profile = 0) {
  WeightQuantizationConfigBuilder builder_(_fbb);
  builder_.add_profile(profile);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<WeightQuantizationConfig> CreateWeightQuantizationConfigDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const std::vector<flatbuffers::Offset<QuantizationConfig>> *profile = nullptr) {
  return tfdl_fb::CreateWeightQuantizationConfig(
      _fbb,
      name ? _fbb.CreateString(name) : 0,
      profile ? _fbb.CreateVector<flatbuffers::Offset<QuantizationConfig>>(*profile) : 0);
}

struct BinaryFile FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_WEIGHT = 4,
    VT_DATA_QUANTIZATION_CONFIG = 6,
    VT_WEIGHT_QUANTIZATION_CONFIG = 8,
    VT_NONUNIFORM_TABLE = 10,
    VT_DATA_TYPE_TABLE = 12
  };
  const flatbuffers::Vector<flatbuffers::Offset<Weight>> *weight() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Weight>> *>(VT_WEIGHT);
  }
  const flatbuffers::Vector<flatbuffers::Offset<DataQuantizationConfig>> *data_quantization_config() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<DataQuantizationConfig>> *>(VT_DATA_QUANTIZATION_CONFIG);
  }
  const flatbuffers::Vector<flatbuffers::Offset<WeightQuantizationConfig>> *weight_quantization_config() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<WeightQuantizationConfig>> *>(VT_WEIGHT_QUANTIZATION_CONFIG);
  }
  const flatbuffers::Vector<flatbuffers::Offset<NonuniformTable>> *nonuniform_table() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<NonuniformTable>> *>(VT_NONUNIFORM_TABLE);
  }
  const flatbuffers::Vector<flatbuffers::Offset<DataTypeTable>> *data_type_table() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<DataTypeTable>> *>(VT_DATA_TYPE_TABLE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_WEIGHT) &&
           verifier.VerifyVector(weight()) &&
           verifier.VerifyVectorOfTables(weight()) &&
           VerifyOffset(verifier, VT_DATA_QUANTIZATION_CONFIG) &&
           verifier.VerifyVector(data_quantization_config()) &&
           verifier.VerifyVectorOfTables(data_quantization_config()) &&
           VerifyOffset(verifier, VT_WEIGHT_QUANTIZATION_CONFIG) &&
           verifier.VerifyVector(weight_quantization_config()) &&
           verifier.VerifyVectorOfTables(weight_quantization_config()) &&
           VerifyOffset(verifier, VT_NONUNIFORM_TABLE) &&
           verifier.VerifyVector(nonuniform_table()) &&
           verifier.VerifyVectorOfTables(nonuniform_table()) &&
           VerifyOffset(verifier, VT_DATA_TYPE_TABLE) &&
           verifier.VerifyVector(data_type_table()) &&
           verifier.VerifyVectorOfTables(data_type_table()) &&
           verifier.EndTable();
  }
};

struct BinaryFileBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_weight(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Weight>>> weight) {
    fbb_.AddOffset(BinaryFile::VT_WEIGHT, weight);
  }
  void add_data_quantization_config(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<DataQuantizationConfig>>> data_quantization_config) {
    fbb_.AddOffset(BinaryFile::VT_DATA_QUANTIZATION_CONFIG, data_quantization_config);
  }
  void add_weight_quantization_config(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<WeightQuantizationConfig>>> weight_quantization_config) {
    fbb_.AddOffset(BinaryFile::VT_WEIGHT_QUANTIZATION_CONFIG, weight_quantization_config);
  }
  void add_nonuniform_table(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<NonuniformTable>>> nonuniform_table) {
    fbb_.AddOffset(BinaryFile::VT_NONUNIFORM_TABLE, nonuniform_table);
  }
  void add_data_type_table(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<DataTypeTable>>> data_type_table) {
    fbb_.AddOffset(BinaryFile::VT_DATA_TYPE_TABLE, data_type_table);
  }
  explicit BinaryFileBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  BinaryFileBuilder &operator=(const BinaryFileBuilder &);
  flatbuffers::Offset<BinaryFile> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<BinaryFile>(end);
    return o;
  }
};

inline flatbuffers::Offset<BinaryFile> CreateBinaryFile(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Weight>>> weight = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<DataQuantizationConfig>>> data_quantization_config = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<WeightQuantizationConfig>>> weight_quantization_config = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<NonuniformTable>>> nonuniform_table = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<DataTypeTable>>> data_type_table = 0) {
  BinaryFileBuilder builder_(_fbb);
  builder_.add_data_type_table(data_type_table);
  builder_.add_nonuniform_table(nonuniform_table);
  builder_.add_weight_quantization_config(weight_quantization_config);
  builder_.add_data_quantization_config(data_quantization_config);
  builder_.add_weight(weight);
  return builder_.Finish();
}

inline flatbuffers::Offset<BinaryFile> CreateBinaryFileDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<Weight>> *weight = nullptr,
    const std::vector<flatbuffers::Offset<DataQuantizationConfig>> *data_quantization_config = nullptr,
    const std::vector<flatbuffers::Offset<WeightQuantizationConfig>> *weight_quantization_config = nullptr,
    const std::vector<flatbuffers::Offset<NonuniformTable>> *nonuniform_table = nullptr,
    const std::vector<flatbuffers::Offset<DataTypeTable>> *data_type_table = nullptr) {
  return tfdl_fb::CreateBinaryFile(
      _fbb,
      weight ? _fbb.CreateVector<flatbuffers::Offset<Weight>>(*weight) : 0,
      data_quantization_config ? _fbb.CreateVector<flatbuffers::Offset<DataQuantizationConfig>>(*data_quantization_config) : 0,
      weight_quantization_config ? _fbb.CreateVector<flatbuffers::Offset<WeightQuantizationConfig>>(*weight_quantization_config) : 0,
      nonuniform_table ? _fbb.CreateVector<flatbuffers::Offset<NonuniformTable>>(*nonuniform_table) : 0,
      data_type_table ? _fbb.CreateVector<flatbuffers::Offset<DataTypeTable>>(*data_type_table) : 0);
}

inline const tfdl_fb::BinaryFile *GetBinaryFile(const void *buf) {
  return flatbuffers::GetRoot<tfdl_fb::BinaryFile>(buf);
}

inline const tfdl_fb::BinaryFile *GetSizePrefixedBinaryFile(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<tfdl_fb::BinaryFile>(buf);
}

inline bool VerifyBinaryFileBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<tfdl_fb::BinaryFile>(nullptr);
}

inline bool VerifySizePrefixedBinaryFileBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<tfdl_fb::BinaryFile>(nullptr);
}

inline void FinishBinaryFileBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<tfdl_fb::BinaryFile> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedBinaryFileBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<tfdl_fb::BinaryFile> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace tfdl_fb

#endif  // FLATBUFFERS_GENERATED_TFDL_TFDL_FB_H_
